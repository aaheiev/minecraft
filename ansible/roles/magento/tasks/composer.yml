---
- name: set php_executable variable to a default if not defined.
  set_fact:
    php_executable: php
  when: php_executable is not defined

- name: install unzip
  apt: pkg=unzip state=present

- name: check if composer is installed.
  stat: "path={{ composer_path }}"
  register: composer_bin

- name: get composer installer signature.
  uri:
    url: https://composer.github.io/installer.sig
    return_content: true
  register: composer_installer_signature
  when: not composer_bin.stat.exists

- name: download composer installer.
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/composer-installer.php
    mode: 0755
    checksum: "sha384:{{ composer_installer_signature.content }}"
  when: not composer_bin.stat.exists

- name: run composer installer.
  command: >
    {{ php_executable }} composer-installer.php {% if composer_version %} --version={{ composer_version }}{% endif %}
    chdir=/tmp
  when: not composer_bin.stat.exists

- name: move composer into globally-accessible location.
  command: >
    mv /tmp/composer.phar {{ composer_path }}
    creates={{ composer_path }}
  when: not composer_bin.stat.exists

- name: update composer to latest version (if configured).
  command: >
    {{ php_executable }} {{ composer_path }} self-update
  register: composer_update
  changed_when: "'Updating to version' in composer_update.stdout"
  when: composer_keep_updated | bool

- name: ensure composer directory exists.
  become:      true
  become_user: "{{ magento_os_user }}"
  file:
    path:  "{{ composer_home_path }}"
    state: directory

- name: add magent access
  become:      true
  become_user: "{{ magento_os_user }}"
  template:
    src:   "magento.auth.json.j2"
    dest:  "{{ composer_home_path }}/auth.json"
